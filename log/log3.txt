# 阶段3 用户管理模块开发工作日志

## 1. 开发目标
实现用户注册、登录功能，包含密码加密功能，完成用户权限管理和验证

## 2. 开发流程

### 第一步：扩展Database类
**修改文件**：
- `database.h` - 添加用户管理相关方法声明
- `database.cpp` - 实现用户注册登录和密码加密方法

**新增功能**：
- `hashPassword()` - SHA-256密码哈希加密
- `registerStudent()` - 学生注册/激活账户
- `registerTeacher()` - 教师注册/激活账户  
- `authenticateStudent()` - 学生登录验证
- `authenticateTeacher()` - 教师登录验证

### 第二步：创建用户实体类
**新建文件**：
- `user.h/cpp` - 用户基类，包含id、name、college基本属性
- `student.h/cpp` - 学生类，继承User类，添加grade属性
- `teacher.h/cpp` - 教师类，继承User类，无额外属性

**设计特点**：
- 极简设计，只包含必要属性
- 清晰的继承结构，便于后续扩展
- 对应数据库表字段设计

### 第三步：创建登录注册界面
**新建文件**：
- `loginwindow.h/cpp` - 登录窗口，支持学生/教师登录
- `registerwindow.h/cpp` - 注册窗口，动态显示年级字段

**界面特点**：
- 用户类型选择（学生/教师）
- 基本信息验证和错误提示
- 密码确认和数据格式检查
- 简洁实用的UI布局

### 第四步：创建主界面框架
**新建文件**：
- `studentmainwindow.h/cpp` - 学生主界面，包含"参与考试"和"考试成绩分析"功能
- `teachermainwindow.h/cpp` - 教师主界面，包含"题库管理"、"考试管理"、"阅卷"、"班级成绩分析"功能

**设计特点**：
- 根据用户类型显示不同功能模块
- 预留后续功能扩展接口
- 统一的退出登录机制

### 第五步：修改程序入口
**修改文件**：
- `main.cpp` - 重新设计启动流程，创建AppController类管理窗口切换

**新增功能**：
- 应用启动时显示登录窗口
- 登录成功后根据用户类型创建对应主界面
- 支持退出登录后重新登录循环

### 第六步：更新项目配置
**修改文件**：
- `CMakeLists.txt` - 添加所有新文件到编译列表

## 3. 关键技术实现

### 密码安全
- 使用SHA-256哈希算法加密存储密码
- 登录验证时对比哈希值，不存储明文密码

### 数据库操作
- 使用Qt的QSqlQuery进行参数化查询，防止SQL注入
- 支持新用户注册和已有用户激活两种模式
- 错误处理和调试信息输出

### 界面管理
- 使用信号槽机制实现窗口间通信
- lambda表达式简化信号槽连接
- 自动内存管理，避免内存泄漏

