
// ============================================================================
// 好友管理功能实现
// ============================================================================

bool Database::addFriendship(int user1Id, const QString &user1Type, int user2Id, const QString &user2Type)
{
    QSqlQuery query;

    // 检查是否已经是好友
    if (areFriends(user1Id, user1Type, user2Id, user2Type)) {
        qDebug() << "用户已经是好友关系";
        return false;
    }

    // 标准化好友关系（确保较小的ID在前面，保持一致性）
    int firstUserId, secondUserId;
    QString firstUserType, secondUserType;

    if (user1Id < user2Id || (user1Id == user2Id && user1Type < user2Type)) {
        firstUserId = user1Id;
        firstUserType = user1Type;
        secondUserId = user2Id;
        secondUserType = user2Type;
    } else {
        firstUserId = user2Id;
        firstUserType = user2Type;
        secondUserId = user1Id;
        secondUserType = user1Type;
    }

    query.prepare("INSERT INTO friend_relationships (user1_id, user1_type, user2_id, user2_type) "
                  "VALUES (?, ?, ?, ?)");
    query.addBindValue(firstUserId);
    query.addBindValue(firstUserType);
    query.addBindValue(secondUserId);
    query.addBindValue(secondUserType);

    if (!query.exec()) {
        qDebug() << "添加好友关系失败:" << query.lastError().text();
        return false;
    }

    qDebug() << "成功添加好友关系:" << firstUserId << firstUserType << "-" << secondUserId << secondUserType;
    return true;
}

bool Database::removeFriendship(int user1Id, const QString &user1Type, int user2Id, const QString &user2Type)
{
    QSqlQuery query;

    query.prepare("DELETE FROM friend_relationships WHERE "
                  "((user1_id = ? AND user1_type = ? AND user2_id = ? AND user2_type = ?) OR "
                  "(user1_id = ? AND user1_type = ? AND user2_id = ? AND user2_type = ?))");
    query.addBindValue(user1Id);
    query.addBindValue(user1Type);
    query.addBindValue(user2Id);
    query.addBindValue(user2Type);
    query.addBindValue(user2Id);
    query.addBindValue(user2Type);
    query.addBindValue(user1Id);
    query.addBindValue(user1Type);

    if (!query.exec()) {
        qDebug() << "删除好友关系失败:" << query.lastError().text();
        return false;
    }

    qDebug() << "成功删除好友关系";
    return true;
}

bool Database::areFriends(int user1Id, const QString &user1Type, int user2Id, const QString &user2Type)
{
    QSqlQuery query;

    query.prepare("SELECT COUNT(*) FROM friend_relationships WHERE "
                  "((user1_id = ? AND user1_type = ? AND user2_id = ? AND user2_type = ?) OR "
                  "(user1_id = ? AND user1_type = ? AND user2_id = ? AND user2_type = ?))");
    query.addBindValue(user1Id);
    query.addBindValue(user1Type);
    query.addBindValue(user2Id);
    query.addBindValue(user2Type);
    query.addBindValue(user2Id);
    query.addBindValue(user2Type);
    query.addBindValue(user1Id);
    query.addBindValue(user1Type);

    if (!query.exec() || !query.next()) {
        qDebug() << "检查好友关系失败:" << query.lastError().text();
        return false;
    }

    int count = query.value(0).toInt();
    qDebug() << "检查好友关系:" << user1Id << user1Type << "和" << user2Id << user2Type << "结果:" << (count > 0);
    return count > 0;
}

QList<QVariantMap> Database::getFriendsList(int userId, const QString &userType)
{
    QList<QVariantMap> friends;
    QSqlQuery query;

    // 简化查询逻辑，分别处理 user1 和 user2 的情况
    query.prepare(
        "SELECT "
        "    CASE "
        "        WHEN fr.user1_id = ? AND fr.user1_type = ? THEN fr.user2_id "
        "        ELSE fr.user1_id "
        "    END as friend_id, "
        "    CASE "
        "        WHEN fr.user1_id = ? AND fr.user1_type = ? THEN fr.user2_type "
        "        ELSE fr.user1_type "
        "    END as friend_type, "
        "    fr.created_time "
        "FROM friend_relationships fr "
        "WHERE (fr.user1_id = ? AND fr.user1_type = ?) OR (fr.user2_id = ? AND fr.user2_type = ?) "
        "ORDER BY fr.created_time DESC"
        );

    // 绑定参数
    query.addBindValue(userId);
    query.addBindValue(userType);
    query.addBindValue(userId);
    query.addBindValue(userType);
    query.addBindValue(userId);
    query.addBindValue(userType);
    query.addBindValue(userId);
    query.addBindValue(userType);

    if (!query.exec()) {
        qDebug() << "获取好友列表失败:" << query.lastError().text();
        return friends;
    }

    // 获取好友基本信息
    while (query.next()) {
        int friendId = query.value("friend_id").toInt();
        QString friendType = query.value("friend_type").toString();
        QDateTime createdTime = query.value("created_time").toDateTime();

        // 根据好友类型获取详细信息
        QSqlQuery detailQuery;
        QString friendName, friendCollege, friendGrade;

        if (friendType == "学生") {
            detailQuery.prepare("SELECT name, college, grade FROM students WHERE student_id = ?");
            detailQuery.addBindValue(friendId);
            if (detailQuery.exec() && detailQuery.next()) {
                friendName = detailQuery.value("name").toString();
                friendCollege = detailQuery.value("college").toString();
                friendGrade = detailQuery.value("grade").toString();
            }
        } else if (friendType == "老师") {
            detailQuery.prepare("SELECT name, college FROM teachers WHERE teacher_id = ?");
            detailQuery.addBindValue(friendId);
            if (detailQuery.exec() && detailQuery.next()) {
                friendName = detailQuery.value("name").toString();
                friendCollege = detailQuery.value("college").toString();
                friendGrade = QString(); // 老师没有年级
            }
        }

        // 添加到结果列表
        if (!friendName.isEmpty()) {
            QVariantMap friendInfo;
            friendInfo["friend_id"] = friendId;
            friendInfo["friend_type"] = friendType;
            friendInfo["friend_name"] = friendName;
            friendInfo["friend_college"] = friendCollege;
            friendInfo["friend_grade"] = friendGrade;
            friendInfo["created_time"] = createdTime;
            friends.append(friendInfo);
        }
    }

    qDebug() << "用户" << userId << userType << "的好友数量:" << friends.size();
    return friends;
}


bool Database::sendFriendRequest(int requesterId, const QString &requesterType, int targetId, const QString &targetType)
{
    // 检查是否已经是好友
    if (areFriends(requesterId, requesterType, targetId, targetType)) {
        qDebug() << "用户已经是好友关系，无法发送请求";
        return false;
    }

    // 检查是否已经有待处理的请求
    if (hasPendingFriendRequest(requesterId, requesterType, targetId, targetType)) {
        qDebug() << "已存在待处理的好友请求";
        return false;
    }

    QSqlQuery query;
    query.prepare("INSERT INTO friend_requests (requester_id, requester_type, target_id, target_type, status) "
                  "VALUES (?, ?, ?, ?, '申请中')");
    query.addBindValue(requesterId);
    query.addBindValue(requesterType);
    query.addBindValue(targetId);
    query.addBindValue(targetType);

    if (!query.exec()) {
        qDebug() << "发送好友请求失败:" << query.lastError().text();
        return false;
    }

    qDebug() << "成功发送好友请求";
    return true;
}

bool Database::acceptFriendRequest(int requestId)
{
    QSqlDatabase::database().transaction();

    try {
        // 获取请求信息
        QSqlQuery selectQuery;
        selectQuery.prepare("SELECT requester_id, requester_type, target_id, target_type FROM friend_requests "
                            "WHERE request_id = ? AND status = '申请中'");
        selectQuery.addBindValue(requestId);

        if (!selectQuery.exec() || !selectQuery.next()) {
            throw std::runtime_error("请求不存在或已处理");
        }

        int requesterId = selectQuery.value("requester_id").toInt();
        QString requesterType = selectQuery.value("requester_type").toString();
        int targetId = selectQuery.value("target_id").toInt();
        QString targetType = selectQuery.value("target_type").toString();

        // 建立好友关系
        if (!addFriendship(requesterId, requesterType, targetId, targetType)) {
            throw std::runtime_error("建立好友关系失败");
        }

        // 更新请求状态
        QSqlQuery updateQuery;
        updateQuery.prepare("UPDATE friend_requests SET status = '已同意' WHERE request_id = ?");
        updateQuery.addBindValue(requestId);

        if (!updateQuery.exec()) {
            throw std::runtime_error("更新请求状态失败");
        }

        QSqlDatabase::database().commit();
        qDebug() << "成功接受好友请求";
        return true;

    } catch (const std::exception &e) {
        QSqlDatabase::database().rollback();
        qDebug() << "接受好友请求失败:" << e.what();
        return false;
    }
}

bool Database::rejectFriendRequest(int requestId)
{
    QSqlQuery query;
    query.prepare("DELETE FROM friend_requests WHERE request_id = ? AND status = '申请中'");
    query.addBindValue(requestId);

    if (!query.exec()) {
        qDebug() << "拒绝好友请求失败:" << query.lastError().text();
        return false;
    }

    if (query.numRowsAffected() == 0) {
        qDebug() << "请求不存在或已处理";
        return false;
    }

    qDebug() << "成功拒绝好友请求";
    return true;
}

QList<QVariantMap> Database::getReceivedFriendRequests(int userId, const QString &userType)
{
    QList<QVariantMap> requests;
    QSqlQuery query;

    query.prepare(
        "SELECT fr.request_id, fr.requester_id, fr.requester_type, "
        "       CASE fr.requester_type "
        "           WHEN '学生' THEN s.name "
        "           WHEN '老师' THEN t.name "
        "       END as requester_name, "
        "       CASE fr.requester_type "
        "           WHEN '学生' THEN s.college "
        "           WHEN '老师' THEN t.college "
        "       END as requester_college, "
        "       CASE fr.requester_type "
        "           WHEN '学生' THEN s.grade "
        "           ELSE NULL "
        "       END as requester_grade, "
        "       fr.request_time "
        "FROM friend_requests fr "
        "LEFT JOIN students s ON (fr.requester_id = s.student_id AND fr.requester_type = '学生') "
        "LEFT JOIN teachers t ON (fr.requester_id = t.teacher_id AND fr.requester_type = '老师') "
        "WHERE fr.target_id = ? AND fr.target_type = ? AND fr.status = '申请中' "
        "ORDER BY fr.request_time DESC"
        );
    query.addBindValue(userId);
    query.addBindValue(userType);

    if (!query.exec()) {
        qDebug() << "获取收到的好友请求失败:" << query.lastError().text();
        return requests;
    }

    while (query.next()) {
        QVariantMap request;
        request["request_id"] = query.value("request_id");
        request["requester_id"] = query.value("requester_id");
        request["requester_type"] = query.value("requester_type");
        request["requester_name"] = query.value("requester_name");
        request["requester_college"] = query.value("requester_college");
        request["requester_grade"] = query.value("requester_grade");
        request["request_time"] = query.value("request_time");
        requests.append(request);
    }

    return requests;
}

QList<QVariantMap> Database::getSentFriendRequests(int userId, const QString &userType)
{
    QList<QVariantMap> requests;
    QSqlQuery query;

    query.prepare(
        "SELECT fr.request_id, fr.target_id, fr.target_type, "
        "       CASE fr.target_type "
        "           WHEN '学生' THEN s.name "
        "           WHEN '老师' THEN t.name "
        "       END as target_name, "
        "       CASE fr.target_type "
        "           WHEN '学生' THEN s.college "
        "           WHEN '老师' THEN t.college "
        "       END as target_college, "
        "       fr.status, fr.request_time "
        "FROM friend_requests fr "
        "LEFT JOIN students s ON (fr.target_id = s.student_id AND fr.target_type = '学生') "
        "LEFT JOIN teachers t ON (fr.target_id = t.teacher_id AND fr.target_type = '老师') "
        "WHERE fr.requester_id = ? AND fr.requester_type = ? "
        "ORDER BY fr.request_time DESC"
        );
    query.addBindValue(userId);
    query.addBindValue(userType);

    if (!query.exec()) {
        qDebug() << "获取发送的好友请求失败:" << query.lastError().text();
        return requests;
    }

    while (query.next()) {
        QVariantMap request;
        request["request_id"] = query.value("request_id");
        request["target_id"] = query.value("target_id");
        request["target_type"] = query.value("target_type");
        request["target_name"] = query.value("target_name");
        request["target_college"] = query.value("target_college");
        request["status"] = query.value("status");
        request["request_time"] = query.value("request_time");
        requests.append(request);
    }

    return requests;
}

bool Database::hasPendingFriendRequest(int requesterId, const QString &requesterType, int targetId, const QString &targetType)
{
    QSqlQuery query;
    query.prepare("SELECT COUNT(*) FROM friend_requests WHERE "
                  "((requester_id = ? AND requester_type = ? AND target_id = ? AND target_type = ?) OR "
                  "(requester_id = ? AND requester_type = ? AND target_id = ? AND target_type = ?)) "
                  "AND status = '申请中'");
    query.addBindValue(requesterId);
    query.addBindValue(requesterType);
    query.addBindValue(targetId);
    query.addBindValue(targetType);
    query.addBindValue(targetId);
    query.addBindValue(targetType);
    query.addBindValue(requesterId);
    query.addBindValue(requesterType);

    if (!query.exec() || !query.next()) {
        return false;
    }

    return query.value(0).toInt() > 0;
}

QList<QVariantMap> Database::searchUsersByKeyword(const QString &keyword, int currentUserId, const QString &currentUserType)
{
    QList<QVariantMap> users;

    if (keyword.trimmed().isEmpty()) {
        return users;
    }

    QSqlQuery query;

    // 搜索学生和教师
    query.prepare(
        "SELECT student_id as user_id, '学生' as user_type, name, college, grade "
        "FROM students "
        "WHERE (name LIKE ? OR CAST(student_id AS CHAR) LIKE ?) AND NOT (student_id = ? AND ? = '学生') "
        "UNION ALL "
        "SELECT teacher_id as user_id, '老师' as user_type, name, college, NULL as grade "
        "FROM teachers "
        "WHERE (name LIKE ? OR CAST(teacher_id AS CHAR) LIKE ?) AND NOT (teacher_id = ? AND ? = '老师') "
        "ORDER BY user_type, name"
        );

    QString searchPattern = "%" + keyword + "%";
    query.addBindValue(searchPattern);
    query.addBindValue(searchPattern);
    query.addBindValue(currentUserId);
    query.addBindValue(currentUserType);
    query.addBindValue(searchPattern);
    query.addBindValue(searchPattern);
    query.addBindValue(currentUserId);
    query.addBindValue(currentUserType);

    if (!query.exec()) {
        qDebug() << "按关键词搜索用户失败:" << query.lastError().text();
        return users;
    }

    while (query.next()) {
        QVariantMap user;
        user["user_id"] = query.value("user_id");
        user["user_type"] = query.value("user_type");
        user["user_name"] = query.value("name");      // 修改：改为 user_name
        user["user_college"] = query.value("college"); // 修改：改为 user_college
        user["user_grade"] = query.value("grade");     // 修改：改为 user_grade

        // 检查关系状态
        int userId = user["user_id"].toInt();
        QString userType = user["user_type"].toString();

        if (areFriends(currentUserId, currentUserType, userId, userType)) {
            user["relationship_status"] = "已是好友";   // 修改：改为 relationship_status
        } else if (hasPendingFriendRequest(currentUserId, currentUserType, userId, userType)) {
            user["relationship_status"] = "已发送请求"; // 修改：改为 relationship_status
        } else if (hasPendingFriendRequest(userId, userType, currentUserId, currentUserType)) {
            user["relationship_status"] = "待处理请求"; // 修改：改为 relationship_status
        } else {
            user["relationship_status"] = "可添加";     // 修改：改为 relationship_status
        }

        users.append(user);
    }

    qDebug() << "搜索用户完成，关键词:" << keyword << "找到" << users.size() << "个用户";
    return users;
}

QList<QVariantMap> Database::searchUsersById(int userId, int currentUserId, const QString &currentUserType)
{
    QList<QVariantMap> users;
    QSqlQuery query;

    // 先搜索学生
    query.prepare("SELECT student_id as user_id, '学生' as user_type, name, college, grade "
                  "FROM students WHERE student_id = ?");
    query.addBindValue(userId);

    if (query.exec() && query.next()) {
        QVariantMap user;
        user["user_id"] = query.value("user_id");
        user["user_type"] = query.value("user_type");
        user["user_name"] = query.value("name");      // 修改：改为 user_name
        user["user_college"] = query.value("college"); // 修改：改为 user_college
        user["user_grade"] = query.value("grade");     // 修改：改为 user_grade

        // 添加关系状态检查
        int searchUserId = user["user_id"].toInt();
        QString searchUserType = user["user_type"].toString();

        if (areFriends(currentUserId, currentUserType, searchUserId, searchUserType)) {
            user["relationship_status"] = "已是好友";   // 修改：改为 relationship_status
        } else if (hasPendingFriendRequest(currentUserId, currentUserType, searchUserId, searchUserType)) {
            user["relationship_status"] = "已发送请求"; // 修改：改为 relationship_status
        } else if (hasPendingFriendRequest(searchUserId, searchUserType, currentUserId, currentUserType)) {
            user["relationship_status"] = "待处理请求"; // 修改：改为 relationship_status
        } else {
            user["relationship_status"] = "可添加";     // 修改：改为 relationship_status
        }

        users.append(user);
        qDebug() << "按ID搜索学生成功:" << userId;
        return users;
    }

    // 再搜索教师
    query.prepare("SELECT teacher_id as user_id, '老师' as user_type, name, college, NULL as grade "
                  "FROM teachers WHERE teacher_id = ?");
    query.addBindValue(userId);

    if (query.exec() && query.next()) {
        QVariantMap user;
        user["user_id"] = query.value("user_id");
        user["user_type"] = query.value("user_type");
        user["user_name"] = query.value("name");      // 修改：改为 user_name
        user["user_college"] = query.value("college"); // 修改：改为 user_college
        user["user_grade"] = query.value("grade");     // 修改：改为 user_grade

        // 添加关系状态检查
        int searchUserId = user["user_id"].toInt();
        QString searchUserType = user["user_type"].toString();

        if (areFriends(currentUserId, currentUserType, searchUserId, searchUserType)) {
            user["relationship_status"] = "已是好友";   // 修改：改为 relationship_status
        } else if (hasPendingFriendRequest(currentUserId, currentUserType, searchUserId, searchUserType)) {
            user["relationship_status"] = "已发送请求"; // 修改：改为 relationship_status
        } else if (hasPendingFriendRequest(searchUserId, searchUserType, currentUserId, currentUserType)) {
            user["relationship_status"] = "待处理请求"; // 修改：改为 relationship_status
        } else {
            user["relationship_status"] = "可添加";     // 修改：改为 relationship_status
        }

        users.append(user);
        qDebug() << "按ID搜索教师成功:" << userId;
    }

    return users;
}

QList<QVariantMap> Database::getClassmates(int studentId)
{
    QList<QVariantMap> classmates;
    QSqlQuery query;

    // 获取同班同学（同一课程的学生）
    query.prepare(
        "SELECT DISTINCT s.student_id as user_id, '学生' as user_type, s.name, s.college, s.grade "
        "FROM students s "
        "JOIN student_courses sc1 ON s.student_id = sc1.student_id "
        "JOIN student_courses sc2 ON sc1.course_id = sc2.course_id "
        "WHERE sc2.student_id = ? AND s.student_id != ? AND sc1.enrollment_status = '已通过' AND sc2.enrollment_status = '已通过' "
        "ORDER BY s.name"
        );
    query.addBindValue(studentId);
    query.addBindValue(studentId);

    if (!query.exec()) {
        qDebug() << "获取同班同学失败:" << query.lastError().text();
        return classmates;
    }

    while (query.next()) {
        QVariantMap classmate;
        classmate["user_id"] = query.value("user_id");
        classmate["user_type"] = query.value("user_type");
        classmate["name"] = query.value("name");
        classmate["college"] = query.value("college");
        classmate["grade"] = query.value("grade");
        classmates.append(classmate);
    }

    return classmates;
}

QList<QVariantMap> Database::getColleagues(int teacherId)
{
    QList<QVariantMap> colleagues;
    QSqlQuery query;

    // 获取同学院的教师
    query.prepare(
        "SELECT DISTINCT t2.teacher_id as user_id, '老师' as user_type, t2.name, t2.college, NULL as grade "
        "FROM teachers t1 "
        "JOIN teachers t2 ON t1.college = t2.college "
        "WHERE t1.teacher_id = ? AND t2.teacher_id != ? "
        "ORDER BY t2.name"
        );
    query.addBindValue(teacherId);
    query.addBindValue(teacherId);

    if (!query.exec()) {
        qDebug() << "获取同事失败:" << query.lastError().text();
        return colleagues;
    }

    while (query.next()) {
        QVariantMap colleague;
        colleague["user_id"] = query.value("user_id");
        colleague["user_type"] = query.value("user_type");
        colleague["name"] = query.value("name");
        colleague["college"] = query.value("college");
        colleague["grade"] = query.value("grade");
        colleagues.append(colleague);
    }

    return colleagues;
}

int Database::getFriendCount(int userId, const QString &userType)
{
    QSqlQuery query;
    query.prepare("SELECT COUNT(*) FROM friend_relationships WHERE "
                  "(user1_id = ? AND user1_type = ?) OR (user2_id = ? AND user2_type = ?)");
    query.addBindValue(userId);
    query.addBindValue(userType);
    query.addBindValue(userId);
    query.addBindValue(userType);

    if (!query.exec() || !query.next()) {
        return 0;
    }

    return query.value(0).toInt();
}

int Database::getPendingRequestCount(int userId, const QString &userType)
{
    QSqlQuery query;
    query.prepare("SELECT COUNT(*) FROM friend_requests WHERE "
                  "target_id = ? AND target_type = ? AND status = '申请中'");
    query.addBindValue(userId);
    query.addBindValue(userType);

    if (!query.exec() || !query.next()) {
        return 0;
    }

    return query.value(0).toInt();
}
