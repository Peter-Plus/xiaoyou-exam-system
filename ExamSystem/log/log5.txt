# 阶段5 考试管理与考题组卷功能开发工作日志

## 1. 开发目标

按照规划.txt要求，完成考试管理与考题组卷功能的完整开发，包括考试CRUD操作、组卷功能、试卷预览、权限管理和状态自动管理等核心功能。

## 2. 开发流程与成果

### 第一步：扩展Database类的考试管理方法 ✅

**修改文件**：`database.h`、`database.cpp`

**新增功能模块**：
- **考试CRUD操作**：
  - `addExam()` - 创建新考试，自动添加创建者权限
  - `updateExam()` - 更新考试基本信息
  - `deleteExam()` - 删除考试（带权限检查）
  - `getExamsByTeacher()` - 获取教师相关的所有考试
  - `getExamsByCourse()` - 按课程获取考试列表

- **考试状态管理**：
  - `getExamStatus()` - 实时计算考试状态（未发布/已发布/进行中/已结束）
  - `publishExam()` - 手动发布考试
  - `terminateExam()` - 手动终止考试
  - `getExamsByStatus()` - 按状态筛选考试

- **组卷相关操作**：
  - `addQuestionToExam()` - 添加题目到试卷，自动更新考频
  - `removeQuestionFromExam()` - 从试卷移除题目
  - `updateQuestionOrder()` - 调整题目顺序
  - `getExamQuestions()` - 获取试卷所有题目（按顺序）
  - `calculateExamTotalScore()` - 计算试卷实际总分
  - `updateExamCompletion()` - 更新组卷完成状态

- **权限管理系统**：
  - `addExamPermission()` - 添加试卷编辑权限
  - `removeExamPermission()` - 移除协作者权限（保护创建者）
  - `getExamPermissions()` - 获取有权限的教师列表
  - `hasExamPermission()` - 检查编辑权限
  - `canModifyExam()` - 检查修改权限（只有创建者可修改）

- **课程管理支持**：
  - `getTeacherCourses()` - 获取教师课程列表
  - 支持跨课程考试创建（用户已优化）

**技术特点**：
- 完整的权限验证机制
- 参数化查询防止SQL注入
- JOIN查询优化性能
- 事务安全的数据操作

### 第二步：创建Exam和Course实体类 ✅

**新建文件**：`exam.h/cpp`、`course.h/cpp`

**Exam类设计**：
- **核心属性**：examId、examName、courseId、examDate、startTime、endTime、totalScore、isPublished、isCompleted
- **扩展属性**：courseName、teacherName、status、questionCount
- **实用方法**：
  - `getStatusText()` - 智能状态计算
  - `getTimeRange()` - 格式化时间显示
  - `canModify()` - 是否可修改判断
  - `canPublish()` - 是否可发布判断
  - `isValid()` - 数据有效性验证

**Course类设计**：
- **核心属性**：courseId、teacherId、college、courseName、teacherName
- **实用方法**：
  - `getDisplayName()` - 完整课程名称显示
  - `isValid()` - 数据有效性验证

**设计原则**：
- 简洁实用，避免过度设计
- 完整的getter/setter方法
- 业务逻辑封装在实体类中
- 支持UI显示的便捷方法

### 第三步：创建考试管理主界面 ✅

**新建文件**：`exammanager.h/cpp`

**界面架构**：
```
[顶部操作区]
[新建考试] [发布考试] [终止考试] [删除考试] [刷新]

[筛选区域]
课程筛选: [全部课程 ▼] 状态筛选: [全部状态 ▼] 搜索: [搜索框]

[考试列表表格]
| 考试名称 | 课程 | 考试日期 | 时间段 | 总分 | 题目数 | 状态 | 权限 |
|----------|------|----------|--------|------|------|------|------|

[底部状态栏]
选中: xxx考试 | 总计: xx个考试 | 未发布: xx | 进行中: xx | 已结束: xx
```

**核心功能实现**：
- **智能按钮状态**：根据选择考试和权限动态启用/禁用操作按钮
- **状态颜色标识**：未发布(灰色)、已发布(蓝色)、进行中(绿色)、已结束(红色)
- **多条件筛选**：支持课程、状态、关键词组合筛选
- **右键菜单**：提供编辑、组卷、分享权限、查看详情等操作
- **自动刷新**：每30秒检查状态变化，保持界面实时性
- **权限控制**：只有创建者可修改/删除，协作者只能组卷

**用户体验优化**：
- 响应式表格布局，支持排序和选择
- 详细的状态统计信息
- 直观的操作反馈
- 双击快速进入组卷

### 第四步：创建考试编辑对话框 ✅

**新建文件**：`examdialog.h/cpp`

**双模式设计**：
- **新建模式**：创建全新考试
- **编辑模式**：修改现有考试信息

**完整表单验证**：
- **基础验证**：考试名称、课程选择、日期时间、总分
- **逻辑验证**：结束时间晚于开始时间、考试日期不能是过去
- **业务验证**：考试时长不少于30分钟、总分大于0
- **权限验证**：已发布考试禁用关键字段修改

**界面特性**：
- 清晰的表单布局
- 智能默认值设置
- 实时验证反馈
- 错误信息定位

**数据处理**：
- 完整的考试对象构造
- 课程信息自动关联
- 时间格式标准化

### 第五步：创建组卷界面 ✅

**新建文件**：`papercomposer.h/cpp`

**分割式布局设计**：
```
[左侧题库区域 60%]                [右侧试卷区域 40%]
┌─ 题目来源标签页 ─┐              ┌─ 试卷信息 ─┐
│ 公共题库|我的题库|收藏题库 │      │ 当前总分: 85/100 │
├─ 多条件筛选区 ─┤              │ 题目数量: 8      │
│ 课程:[xx] 题型:[xx] 搜索 │      ├─ 试卷题目列表 ─┤
├─ 题目列表表格 ─┤              │ 1. [单选][5分]... │
│ [题型][分值][题干预览] │        │ 2. [填空][10分]...│
└─────────────────┘              │ [↑][↓][删除]     │
                                  ├─ 操作按钮 ─┤
                                  │ [保存][预览][分享] │
                                  └─────────────┘
```

**核心功能实现**：
- **三个题库来源**：公共题库、个人题库、收藏题库
- **多条件筛选**：课程、题型、关键词，延迟搜索优化性能
- **拖拽式组卷**：双击添加题目，支持顺序调整
- **实时分数统计**：当前总分实时更新，颜色标识分数状态
- **智能重复检测**：防止同一题目重复添加
- **分数超限提醒**：超出目标分数时提供警告选项

**交互优化**：
- 响应式分割布局
- 题目预览悬浮显示
- 操作按钮状态智能控制
- 保存前自动验证

### 第六步：创建试卷预览对话框 ✅

**新建文件**：`paperpreview.h/cpp`

**专业试卷格式**：
- **标题区域**：考试名称、考试信息（时间、时长、总分）
- **考生信息栏**：姓名、学号、班级、座位号填写区域
- **考试说明**：题目数量、考试时间、答题要求
- **题目内容**：按题型分组显示，清晰的题目编号和分值
- **答题区域**：根据题型提供相应的答题空间

**题型适配**：
- **选择题**：选项完整显示，预留答案填写区
- **填空题**：提供填写横线区域
- **主观题**：根据分值估算答题行数

**输出功能**：
- **屏幕预览**：完整的试卷格式显示，支持滚动查看
- **打印支持**：A4纸张优化，专业的打印排版
- **格式保持**：打印版本保持完整的试卷样式

**技术实现**：
- HTML格式化显示
- CSS样式优化排版
- QPrinter高质量打印
- 自适应内容长度

### 第七步：创建权限分享对话框 ✅

**新建文件**：`permissiondialog.h/cpp`

**双栏式权限管理**：
```
[已有权限教师]    [操作按钮]    [可授权教师]
┌─────────────┐   ┌───────┐   ┌─────────────┐
│ 张教授 [创建者] │   │ 授权 → │   │ 李老师      │
│ 王老师 [协作者] │   │ ← 撤销│   │ 赵教授      │
└─────────────┘   └───────┘   └─────────────┘
```

**权限管理功能**：
- **权限显示**：区分创建者和协作者，创建者用特殊标识
- **授权功能**：从可用教师中选择并授予编辑权限
- **撤销功能**：移除协作者权限（创建者权限不可撤销）
- **学院筛选**：按学院筛选可授权的教师
- **批量管理**：支持多个协作者的权限管理

**安全机制**：
- 创建者权限保护
- 权限验证和确认提示
- 操作日志记录
- 友好的错误处理

### 第八步：实现考试状态自动管理 ✅

**新建文件**：`examstatusmanager.h/cpp`

**自动化管理机制**：
```cpp
class ExamStatusManager : public QObject {
    Q_OBJECT
private:
    QTimer *statusCheckTimer;    // 定时检查器
    Database *database;          // 数据库连接
    int checkInterval;           // 检查间隔
    
public slots:
    void checkExamStatus();      // 定期状态检查
    void autoPublishExams();     // 自动发布考试
    void autoTerminateExams();   // 自动终止考试
    
signals:
    void examStatusChanged(int examId, QString oldStatus, QString newStatus);
    void examAutoPublished(int examId, QString examName);
    void examAutoTerminated(int examId, QString examName);
};
```

**智能状态管理**：
- **定时检查**：可配置间隔（默认30秒），检查所有考试状态
- **自动发布**：考试开始时间到达时自动发布（需完成组卷）
- **自动终止**：考试结束时间到达时自动终止
- **状态通知**：实时发送状态变化信号
- **提前发布**：支持提前5分钟自动发布设置

**事件驱动架构**：
- 完整的信号槽机制
- 异步事件处理
- 详细的操作日志
- 状态变化统计

### 第九步：集成到教师主界面 ✅

**修改文件**：`teachermainwindow.h/cpp`、`main.cpp`

**主界面集成效果**：
- **统一入口**：通过教师主界面访问考试管理功能
- **独立窗口**：考试管理作为独立窗口打开，避免界面冲突
- **智能窗口管理**：防止重复创建，支持窗口激活和切换
- **生命周期管理**：退出登录时自动关闭所有子窗口
- **数据库共享**：主界面和子模块共享同一数据库连接

**集成优化**：
- 修改了QuestionManager构造函数，支持外部Database传入
- 解决了数据库连接管理问题
- 优化了内存管理和资源释放
- 允许老师选择所有课程创建考试（用户优化）

### 第十步：更新项目配置 ✅

**修改文件**：`CMakeLists.txt`

**配置完善**：
- **新增Qt模块**：添加PrintSupport模块支持试卷打印
- **源文件整理**：按功能模块组织所有新增的源文件
- **依赖管理**：确保所有Qt组件正确链接
- **编译优化**：统一的源文件列表管理

**项目结构优化**：
```
ExamSystem/
├── 数据库和基础类/
├── 登录注册模块/
├── 主界面模块/
├── 题库管理模块/
└── 考试管理模块/    ← 新增完整模块
    ├── exam.h/cpp
    ├── course.h/cpp
    ├── exammanager.h/cpp
    ├── examdialog.h/cpp
    ├── papercomposer.h/cpp
    ├── paperpreview.h/cpp
    ├── permissiondialog.h/cpp
    └── examstatusmanager.h/cpp
```

## 3. 技术实现亮点

### 数据库设计优化
- **复合主键设计**：exam_questions、exam_permissions表使用复合主键
- **外键约束**：完整的引用完整性保证
- **索引优化**：关键查询字段建立索引提升性能
- **事务安全**：关键操作使用事务保证数据一致性

### 权限管理机制
- **分层权限控制**：创建者→协作者→普通用户
- **操作权限细分**：修改、删除、组卷、查看等不同权限
- **动态权限检查**：所有操作前实时验证权限
- **权限继承**：考试权限与题目权限的合理分离

### 状态管理系统
- **实时状态计算**：基于当前时间动态计算考试状态
- **自动化流程**：考试发布和终止的自动化管理
- **事件驱动架构**：状态变化的异步通知机制
- **容错机制**：网络异常、数据库连接中断的处理

### 用户界面设计
- **响应式布局**：支持不同屏幕尺寸的自适应
- **状态可视化**：颜色、图标等多维度状态标识
- **交互优化**：快捷键、右键菜单、拖拽操作
- **性能优化**：延迟搜索、分页加载、智能刷新
