# 阶段2 数据库设计工作日志

## 1. 产品功能分析

### 完成产品设计文档
- 明确了用户角色：老师、学生
- 定义了8个核心功能模块：
  - 老师功能：考题管理、题库管理、考题组卷、阅卷、班级成绩分析
  - 学生功能：参与考试、考试成绩分析
- 确定了考试状态流转：未发布 → 已发布 → 进行中 → 已结束
- 明确了数据导入方式：手动导入用户和选课信息

### 核心业务流程梳理
1. **用户管理流程**：数据库手动导入 → 用户注册激活
2. **题库管理流程**：老师出题 → 设置公开/私有 → 其他老师收藏
3. **考试管理流程**：创建考试 → 组卷 → 发布 → 学生答题 → 老师阅卷
4. **成绩管理流程**：答题记录 → 成绩统计 → 成绩分析

## 2. 数据库设计优化

### 设计原则
- **简化优先**：在满足功能需求的前提下尽可能简化表结构
- **避免冗余**：通过计算获取的数据不单独存储（如考试总成绩）
- **保证完整性**：合理设置外键约束和级联删除
- **考虑性能**：在关键查询字段上建立索引

### 最终表结构设计
确定了10张核心表：

#### 用户与课程关系（4张表）
1. **students**：学生基本信息
2. **teachers**：教师基本信息  
3. **courses**：课程信息
4. **student_courses**：选课关系表（复合主键）

#### 题库管理（2张表）
5. **questions**：题目详细信息
6. **question_favorites**：题目收藏关系（复合主键）

#### 考试管理（4张表）
7. **exams**：考试基本信息
8. **exam_questions**：试卷题目关联（复合主键）
9. **exam_permissions**：试卷权限管理（复合主键）
10. **student_answers**：学生答题记录（三元复合主键）

## 3. ER图设计

### 使用工具
- 采用Mermaid语法绘制ER图
- 清晰展示了实体间的关系和基数

### 核心关系设计
- **一对多关系**：教师→课程、课程→考试、教师→题目
- **多对多关系**：学生↔课程、考试↔题目、教师↔题目收藏
- **三元关系**：学生+考试+题目 → 答题记录

### 关系完整性保证
- 所有外键关系均设置级联删除
- 复合主键确保数据唯一性
- 索引优化提高查询性能

## 4. SQL实现

### 建表语句特点
```sql
-- 10张表的完整CREATE TABLE语句
-- 外键约束：ON DELETE CASCADE
-- 索引设计：关键查询字段建立索引
-- 数据类型：VARCHAR支持中文，TEXT支持长文本
-- 默认值：合理的默认值设置
```

### 实用视图创建
1. **student_exam_scores**：学生考试成绩汇总视图
   - 自动计算总分、百分比、答题进度
2. **teacher_question_stats**：教师题目统计视图
   - 统计出题数量、公开题目、收藏情况

### 数据库优化
- 使用复合主键减少冗余ID字段
- 合理的字段类型选择（VARCHAR vs TEXT）
- 关键字段建立索引提高查询效率

## 5. 设计验证

### 功能覆盖验证
✅ 用户注册登录：students、teachers表支持  
✅ 课程选修关系：student_courses表支持  
✅ 题库管理：questions、question_favorites表支持  
✅ 考试管理：exams、exam_questions、exam_permissions表支持  
✅ 答题记录：student_answers表支持  
✅ 成绩统计：通过视图和查询实现  

### 数据完整性验证
✅ 外键约束保证引用完整性  
✅ 复合主键保证实体完整性  
✅ 非空约束保证域完整性  
✅ 级联删除保证操作完整性  

## 6. 成果输出

### 交付物
1. **产品设计文档**：完整的功能需求分析
2. **ER图**：Mermaid格式的实体关系图
3. **SQL脚本**：可直接执行的建表语句
4. **数据字典**：表结构和字段说明
5. **设计文档**：数据库设计思路和优化说明

### 技术栈确认
- **数据库**：MySQL 8.0+
- **字符集**：utf8mb4（支持完整Unicode）
- **存储引擎**：InnoDB（支持事务和外键）
- **设计工具**：Mermaid（ER图）、Draw.io（可选）

## 7. 下一阶段准备

### 为阶段3做准备
- 数据库表结构已确定，可以开始用户管理模块开发
- Database类需要扩展，添加更多表的创建方法
- 考虑添加数据访问层（DAO）类设计

### 建议的开发顺序
1. 用户注册登录功能
2. 基础数据管理（学生、教师、课程信息维护）
3. 题库管理功能
4. 考试管理功能
5. 答题和阅卷功能

---

**阶段2总结**：数据库设计工作圆满完成，建立了简洁高效的数据模型，为后续Qt应用开发奠定了坚实基础。设计方案在保证功能完整性的同时实现了最大程度的简化，符合项目需求和开发效率要求。