下载mysql-connector-odbc-9.3.0-winx64.msi，安装完即可

在QT项目中需要两个文件database.h/.cpp
====================================================================================
.h文件：
#ifndef DATABASE_H
#define DATABASE_H

#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QDebug>

class Database
{
public:
    Database();
    bool connectToDatabase();//连接
    void createTables();//用于测试数据库是否连接
    void closeDatabase();//关闭
    
private:
    QSqlDatabase db;
};

#endif // DATABASE_H
====================================================================================
.cpp:
#include "database.h"

Database::Database()
{
}

bool Database::connectToDatabase()
{
    db = QSqlDatabase::addDatabase("QODBC");
    
    // 使用正确的64位驱动名称
    QStringList driverNames = {
        "MySQL ODBC 9.3 Unicode Driver",
        "MySQL ODBC 9.3 ANSI Driver"
    };
    
    bool connected = false;
    for (const QString &driverName : driverNames) {
        QString connectionString = QString("DRIVER={%1};"
                                          "SERVER=localhost;"
                                          "DATABASE=exam_system;"
                                          "UID=root;"
                                          "PWD=Zy202312138;"//    ====================记住改密码！！！！
                                          "PORT=3306;").arg(driverName);
        
        db.setDatabaseName(connectionString);
        
        if (db.open()) {
            qDebug() << "数据库连接成功! 使用驱动:" << driverName;
            connected = true;
            break;
        } else {
            qDebug() << "尝试驱动" << driverName << "失败:" << db.lastError().text();
        }
    }
    
    if (!connected) {
        qDebug() << "所有驱动尝试失败";
        return false;
    }
    
    return true;
}

void Database::createTables()
{
    QSqlQuery query;
    
    QString createUsersTable = 
        "CREATE TABLE IF NOT EXISTS users ("
        "id INT AUTO_INCREMENT PRIMARY KEY,"
        "username VARCHAR(50) UNIQUE NOT NULL,"
        "password VARCHAR(255) NOT NULL,"
        "role ENUM('student', 'teacher', 'admin') DEFAULT 'student',"
        "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        ")";
    
    if (!query.exec(createUsersTable)) {
        qDebug() << "创建用户表失败:" << query.lastError().text();
    } else {
        qDebug() << "用户表创建成功";
    }
}

void Database::closeDatabase()
{
    if (db.isOpen()) {
        db.close();
    }
}

==================================================================================

main.cpp //在这个文件中测试数据库连接

#include "mainwindow.h"
#include "database.h"
#include <QApplication>
#include <QDebug>
#include <QSqlDatabase>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    
    // 检查可用驱动
    QStringList drivers = QSqlDatabase::drivers();
    qDebug() << "可用驱动:" << drivers;
    
    // 测试数据库连接
    Database database;
    if (database.connectToDatabase()) {
        qDebug() << "开始创建数据库表...";
        database.createTables();
    } else {
        qDebug() << "数据库连接失败，程序继续运行";
    }
    
    MainWindow w;
    w.show();
    
    return a.exec();
}










